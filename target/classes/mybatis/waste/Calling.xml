<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mlsc.yifeiwang.calling.mapper.CallingMapper">

	<!-- 通用查询映射结果 -->
	<resultMap id="BaseResultMap" type="com.mlsc.yifeiwang.calling.entity.Calling">
		<id column="id" property="id" />
		<result column="code" property="code" />
		<result column="parent_id" property="parent_id" />
		<result column="name" property="name" />
		<result column="description" property="description" />
		<result column="status" property="status" />
		<result column="create_by" property="create_by" />
		<result column="create_time" property="create_time" />
		<result column="edit_by" property="edit_by" />
		<result column="edit_time" property="edit_time" />
	</resultMap>
	<select id="listCalling" resultType="com.mlsc.yifeiwang.calling.model.CallingListPojo">
		SELECT * from (
			SELECT a.id AS id, a.name AS firstLevel,'' AS secondLevel,'' AS thirdLevel,'' AS fourthLevel, a. STATUS AS c_status
			FROM calling a
			WHERE a.parent_id = '-1'
			UNION
			SELECT a2.id AS id, a1.name AS firstLevel,a2.name AS secondLevel,'' AS thirdLevel,'' AS fourthLevel, a2. STATUS AS c_status
			FROM calling a2
			LEFT JOIN calling a1  ON a2.parent_id = a1.id
			WHERE  a1.parent_id = '-1'
			UNION
			SELECT a3.id AS id, a1.name AS firstLevel, a2.name AS secondLevel,a3.name AS thirdLevel,'' AS fourthLevel, a3. STATUS AS c_status
			FROM calling a3
			LEFT JOIN calling a2  ON a2.id = a3.parent_id
			LEFT JOIN calling a1  ON a1.id = a2.parent_id
			WHERE  a1.parent_id = '-1'
			UNION
			SELECT a4.id AS id, a1.name AS firstLevel, a2.name AS secondLevel, a3.name AS thirdLevel,a4.name AS fourthLevel, a4. STATUS AS c_status
			FROM calling a4
			LEFT JOIN calling a3  ON a3.id = a4.parent_id
			LEFT JOIN calling a2  ON a2.id = a3.parent_id
			LEFT JOIN calling a1  ON a1.id = a2.parent_id
			WHERE  a1.parent_id = '-1'
		) tmp
		<where>
			<if test="firstLevel != null">
				tmp.firstLevel = #{firstLevel}
			</if>
			<if test="secondLevel != null">
				and tmp.secondLevel = #{secondLevel}
			</if>
			<if test="thirdLevel != null">
				and tmp.thirdLevel = #{thirdLevel}
			</if>
			<if test="fourthLevel != null">
				and tmp.fourthLevel = #{fourthLevel}
			</if>
		</where>
		ORDER BY tmp.firstLevel,tmp.secondLevel,tmp.thirdLevel,tmp.fourthLevel
		LIMIT ${start} , ${rows}
	</select>
	<select id="listCallingByPage" resultType="com.mlsc.yifeiwang.calling.model.CallingListPojo">
	SELECT  * from (
	SELECT  a.id AS id,
		a. NAME AS firstLevel,
		'' AS secondLevel,
		'' AS thirdLevel,
		'' AS fourthLevel,
		a. STATUS AS c_status
	FROM
		calling a
	WHERE
		a.parent_id = '-1'
	UNION
		SELECT
			a2.id AS id,
			a1. NAME AS firstLevel,
			a2. NAME AS secondLevel,
			'' AS thirdLevel,
			'' AS fourthLevel,
			a2. STATUS AS c_status
		FROM
			calling a2
		LEFT JOIN calling a1 ON a2.parent_id = a1.id
		WHERE
			a1.parent_id = '-1'
		UNION
			SELECT
				a3.id AS id,
				a1. NAME AS firstLevel,
				a2. NAME AS secondLevel,
				a3. NAME AS thirdLevel,
				'' AS fourthLevel,
				a3. STATUS AS c_status
			FROM
				calling a3
			LEFT JOIN calling a2 ON a2.id = a3.parent_id
			LEFT JOIN calling a1 ON a1.id = a2.parent_id
			WHERE
				a1.parent_id = '-1'
			UNION
				SELECT
					a4.id AS id,
					a1. NAME AS firstLevel,
					a2. NAME AS secondLevel,
					a3. NAME AS thirdLevel,
					a4. NAME AS fourthLevel,
					a4. STATUS AS c_status
				FROM
					calling a4
				LEFT JOIN calling a3 ON a3.id = a4.parent_id
				LEFT JOIN calling a2 ON a2.id = a3.parent_id
				LEFT JOIN calling a1 ON a1.id = a2.parent_id
				WHERE
					a1.parent_id = '-1') twp
			LIMIT ${start},${limit}
	</select>
	<select id="totalCalling" resultType="int">
		SELECT  count(1) from (
	SELECT  a.id AS id,
		a. NAME AS firstLevel,
		'' AS secondLevel,
		'' AS thirdLevel,
		'' AS fourthLevel,
		a. STATUS AS c_status
	FROM
		calling a
	WHERE
		a.parent_id = '-1'
	UNION
		SELECT
			a2.id AS id,
			a1. NAME AS firstLevel,
			a2. NAME AS secondLevel,
			'' AS thirdLevel,
			'' AS fourthLevel,
			a2. STATUS AS c_status
		FROM
			calling a2
		LEFT JOIN calling a1 ON a2.parent_id = a1.id
		WHERE
			a1.parent_id = '-1'
		UNION
			SELECT
				a3.id AS id,
				a1. NAME AS firstLevel,
				a2. NAME AS secondLevel,
				a3. NAME AS thirdLevel,
				'' AS fourthLevel,
				a3. STATUS AS c_status
			FROM
				calling a3
			LEFT JOIN calling a2 ON a2.id = a3.parent_id
			LEFT JOIN calling a1 ON a1.id = a2.parent_id
			WHERE
				a1.parent_id = '-1'
			UNION
				SELECT
					a4.id AS id,
					a1. NAME AS firstLevel,
					a2. NAME AS secondLevel,
					a3. NAME AS thirdLevel,
					a4. NAME AS fourthLevel,
					a4. STATUS AS c_status
				FROM
					calling a4
				LEFT JOIN calling a3 ON a3.id = a4.parent_id
				LEFT JOIN calling a2 ON a2.id = a3.parent_id
				LEFT JOIN calling a1 ON a1.id = a2.parent_id
				WHERE
					a1.parent_id = '-1') twp
	</select>
	<select id="countCalling" resultType="int">
		SELECT count(tmp.id) from (
			SELECT a.id AS id, a.name AS firstLevel,'' AS secondLevel,'' AS thirdLevel,'' AS fourthLevel, a. STATUS AS c_status
			FROM calling a
			WHERE a.parent_id = '-1'
			UNION
			SELECT a2.id AS id, a1.name AS firstLevel,a2.name AS secondLevel,'' AS thirdLevel,'' AS fourthLevel, a2. STATUS AS c_status
			FROM calling a2
			LEFT JOIN calling a1  ON a2.parent_id = a1.id
			WHERE  a1.parent_id = '-1'
			UNION
			SELECT a3.id AS id, a1.name AS firstLevel, a2.name AS secondLevel,a3.name AS thirdLevel,'' AS fourthLevel, a3. STATUS AS c_status
			FROM calling a3
			LEFT JOIN calling a2  ON a2.id = a3.parent_id
			LEFT JOIN calling a1  ON a1.id = a2.parent_id
			WHERE  a1.parent_id = '-1'
			UNION
			SELECT a4.id AS id, a1.name AS firstLevel, a2.name AS secondLevel, a3.name AS thirdLevel,a4.name AS fourthLevel, a4. STATUS AS c_status
			FROM calling a4
			LEFT JOIN calling a3  ON a3.id = a4.parent_id
			LEFT JOIN calling a2  ON a2.id = a3.parent_id
			LEFT JOIN calling a1  ON a1.id = a2.parent_id
			WHERE  a1.parent_id = '-1'
		) tmp
		<where>
			<if test="firstLevel != null">
				tmp.firstLevel = #{firstLevel}
			</if>
			<if test="secondLevel != null">
				and tmp.secondLevel = #{secondLevel}
			</if>
			<if test="thirdLevel != null">
				and tmp.thirdLevel = #{thirdLevel}
			</if>
			<if test="fourthLevel != null">
				and tmp.fourthLevel = #{fourthLevel}
			</if>
		</where>
	</select>
	<select id="listThirdLevelCalling" resultType="com.mlsc.yifeiwang.calling.model.CallingVo">
		SELECT id as calling_id, code, CONCAT(`code`,'-',`name`) AS callingOriginal FROM  calling where length(code) = 3
	</select>
</mapper>
